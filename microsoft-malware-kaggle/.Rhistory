dataPath <- "/Users/adeshghadge/Documents/Kaggle/MicrosoftMalware/data"
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE)
head(train.data)
names(train.data)
summary(train.data$HasDetections)
discoveries(train.data$HasDetections)
table(train.data$HasDetections)
table(train.data$Census_OSInstallLanguageIdentifier)
table(train.data$Census_OSUILocaleIdentifier)
library(dplyr)
table(train.data$IsBeta)
table(train.data)
table(train.data$OrganizationIdentifier)
table(train.data$SkuEdition)
table(train.data$AutoSampleOptIn)
type(train.data$Census_SystemVolumeTotalCapacity)
typeof(train.data$Census_SystemVolumeTotalCapacity)
typeof(train.data$ProductName)
train.data$ProductName
train.data$ProductName <- as.factor(train.data$ProductName)
train.data$EngineVersion <- as.factor(train.data$EngineVersion)
train.data$AppVersion <- as.factor(train.data$AppVersion)
train.data$AvSigVersion <- as.factor(train.data$AvSigVersion)
train.data$DefaultBrowsersIdentifier <- as.factor(train.data$DefaultBrowsersIdentifier)
train.data$AVProductStatesIdentifier <- as.factor(train.data$AVProductStatesIdentifier)
train.data$HasTpm <- as.factor(train.data$HasTpm)
train.data$HasTpm <- as.logical(train.data$HasTpm)
train.data$HasTpm
train.data$AVProductStatesIdentifier
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE)
train.data$AppVersion
length(unique(train.data$AppVersion))
as.factor(train.data$AppVersion)
as.factor(train.data$AvSigVersion)
as.factor(train.data$DefaultBrowsersIdentifier)
train.data$DefaultBrowsersIdentifier
length(unique(train.data$DefaultBrowsersIdentifier))
table(DefaultBrowsersIdentifier)
tables(DefaultBrowsersIdentifier)
table(DefaultBrowsersIdentifier)
table(train.data$DefaultBrowsersIdentifier)
as.factor(train.data$DefaultBrowsersIdentifier)
as.logical(train.data$HasTpm)
train.data$HasTpm
train.data$DefaultBrowsersIdentifier
train.data$AVProductStatesIdentifier
train.data$DefaultBrowsersIdentifier
length(train.data$DefaultBrowsersIdentifier[is.na(train.data$DefaultBrowsersIdentifier)])
dim(train.data)
library(imputeTS)
statsNA(train.data)
statsNA(train.data$MachineIdentifier)
statsNA(train.data$AVProductStatesIdentifier)
#train.data$HasTpm <- as.logical(train.data$HasTpm)
train.data$CountryIdentifier <- as.factor(train.data$CountryIdentifier)
train.data$CountryIdentifier
train.data$CityIdentifier <- as.factor(train.data$CityIdentifier)
train.data$OrganizationIdentifier <- as.factor(train.data$OrganizationIdentifier)
train.data$GeoNameIdentifier <- as.factor(train.data$GeoNameIdentifier)
train.data$LocaleEnglishNameIdentifier <- as.factor(train.data$LocaleEnglishNameIdentifier)
train.data$Platform <- as.factor(train.data$Platform)
train.data$Processor <- as.factor(train.data$Processor)
train.data$OsVer <- as.factor(train.data$OsVer)
train.data$OsBuild <- as.factor(train.data$OsBuild)
train.data$OsSuite <- as.factor(train.data$OsSuite)
train.data$OsPlatformSubRelease <- as.factor(train.data$OsPlatformSubRelease)
train.data$OsBuildLab <- as.factor(train.data$OsBuildLab)
train.data$SkuEdition <- as.factor(train.data$SkuEdition)
train.data$IsProtected
train.data$PuaMode
train.data$PuaMode
table(train.data$PuaMode)
train.data$SMode
train.data$SmartScreen
length(unique(train.data$SmartScreen))
table(train.data$SmartScreen)
train.data$SmartScreen <- as.factor(train.data$SmartScreen)
train.data$Firewall
train.data$UacLuaenable
train.data$Census_MDC2FormFactor
train.data$Census_MDC2FormFactor <- as.factor(train.data$Census_MDC2FormFactor)
train.data$Census_DeviceFamily
train.data$Census_DeviceFamily <- as.factor(train.data$Census_DeviceFamily)
train.data$Census_ProcessorCoreCount
train.data$Census_ProcessorClass
#train.data$Census_ProcessorCoreCount <- as.factor(train.data$Census_ProcessorCoreCount)
train.data$Census_ProcessorClass <- as.factor(train.data$Census_ProcessorClass)
train.data$Census_PrimaryDiskTotalCapacity
train.data$Census_PrimaryDiskTypeName
train.data$Census_PrimaryDiskTypeName <- as.factor(train.data$Census_PrimaryDiskTypeName)
train.data$Census_SystemVolumeTotalCapacity
train.data$Census_HasOpticalDiskDrive
train.data$Census_ChassisTypeName <- as.factor(train.data$Census_ChassisTypeName)
train.data$Census_InternalPrimaryDisplayResolutionHorizontal
#train.data$Census_InternalPrimaryDiagonalDisplaySizeInInches <- as.factor(train.data$Census_InternalPrimaryDiagonalDisplaySizeInInches)
train.data$Census_InternalPrimaryDisplayResolutionHorizontal <- as.factor(train.data$Census_InternalPrimaryDisplayResolutionHorizontal)
train.data$Census_InternalPrimaryDisplayResolutionVertical <- as.factor(train.data$Census_InternalPrimaryDisplayResolutionVertical)
train.data$Census_PowerPlatformRoleName <- as.factor(train.data$Census_PowerPlatformRoleName)
train.data$Census_OSVersion <- as.factor(train.data$Census_OSVersion)
train.data$Census_OSArchitecture <- as.factor(train.data$Census_OSArchitecture)
train.data$Census_OSBranch <- as.factor(train.data$Census_OSBranch)
train.data$Census_OSBuildNumber <- as.factor(train.data$Census_OSBuildNumber)
train.data$Census_OSBuildRevision <- as.factor(train.data$Census_OSBuildRevision)
train.data$Census_OSEdition <- as.factor(train.data$Census_OSEdition)
train.data$Census_OSSkuName <- as.factor(train.data$Census_OSSkuName)
train.data$Census_OSInstallTypeName <- as.factor(train.data$Census_OSInstallTypeName)
train.data$Census_OSWUAutoUpdateOptionsName <- as.factor(train.data$Census_OSWUAutoUpdateOptionsName)
train.data$Census_IsPortableOperatingSystem <- as.factor(train.data$Census_IsPortableOperatingSystem)
train.data$Census_GenuineStateName <- as.factor(train.data$Census_GenuineStateName)
train.data$Census_ActivationChannel <- as.factor(train.data$Census_ActivationChannel)
train.data$Census_IsFlightsDisabled
train.data$Census_FlightRing
#train.data$Census_IsFlightsDisabled <- as.factor(train.data$Census_IsFlightsDisabled)
train.data$Census_FlightRing <- as.factor(train.data$Census_FlightRing)
train.data$Wdft_IsGamer
#train.data$IsProtected <- as.factor(train.data$IsProtected)
train.data$PuaMode <- as.factor(train.data$PuaMode)
train.data <- select(train.data, ProductName, EngineVersion, AppVersion, AvSigVersion, AVProductStatesIdentifier, HasTpm, CountryIdentifier, CityIdentifier, OrganizationIdentifier, GeoNameIdentifier, LocaleEnglishNameIdentifier, Platform, Processor, OsVer, OsBuild, OsSuite, OsPlatformSubRelease, OsBuildLab, SkuEdition, IsProtected, PuaMode, SMode, SmartScreen, Firewall, UacLuaenable, Census_MDC2FormFactor, Census_DeviceFamily, Census_ProcessorCoreCount, Census_ProcessorClass, Census_PrimaryDiskTotalCapacity, Census_PrimaryDiskTypeName, Census_SystemVolumeTotalCapacity, Census_HasOpticalDiskDrive, Census_TotalPhysicalRAM, Census_ChassisTypeName, Census_InternalPrimaryDiagonalDisplaySizeInInches, Census_InternalPrimaryDisplayResolutionHorizontal, Census_InternalPrimaryDisplayResolutionVertical, Census_PowerPlatformRoleName, Census_OSVersion, Census_OSArchitecture, Census_OSBranch, Census_OSBuildNumber, Census_OSBuildRevision, Census_OSEdition, Census_OSSkuName, Census_OSInstallTypeName, Census_OSWUAutoUpdateOptionsName, Census_IsPortableOperatingSystem, Census_GenuineStateName, Census_ActivationChannel, Census_IsFlightsDisabled, Census_FlightRing, Census_IsSecureBootEnabled, Census_IsVirtualDevice, Census_IsTouchEnabled, Census_IsPenCapable, Census_IsAlwaysOnAlwaysConnectedCapable, Wdft_IsGamer)
head(train.data)
library(randomForest)
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE)
names(train.data)
#train.data$Census_IsSecureBootEnabled <- as.factor(train.data$Census_IsSecureBootEnabled)
#train.data$Census_IsVirtualDevice <- as.factor(train.data$Census_IsVirtualDevice)
#train.data$Census_IsTouchEnabled <- as.factor(train.data$Census_IsTouchEnabled)
#train.data$Census_IsPenCapable <- as.factor(train.data$Census_IsPenCapable)
#train.data$Census_IsAlwaysOnAlwaysConnectedCapable <- as.factor(train.data$Census_IsAlwaysOnAlwaysConnectedCapable)
#train.data$Wdft_IsGamer <- as.factor(train.data$Wdft_IsGamer)
train.data$Wdft_RegionIdentifier
#train.data$Census_IsSecureBootEnabled <- as.factor(train.data$Census_IsSecureBootEnabled)
#train.data$Census_IsVirtualDevice <- as.factor(train.data$Census_IsVirtualDevice)
#train.data$Census_IsTouchEnabled <- as.factor(train.data$Census_IsTouchEnabled)
#train.data$Census_IsPenCapable <- as.factor(train.data$Census_IsPenCapable)
#train.data$Census_IsAlwaysOnAlwaysConnectedCapable <- as.factor(train.data$Census_IsAlwaysOnAlwaysConnectedCapable)
#train.data$Wdft_IsGamer <- as.factor(train.data$Wdft_IsGamer)
train.data$Wdft_RegionIdentifier <- as.factor(train.data$Wdft_RegionIdentifier)
train.data$ProductName <- as.factor(train.data$ProductName)
train.data$EngineVersion <- as.factor(train.data$EngineVersion)
train.data$AppVersion <- as.factor(train.data$AppVersion)
train.data$AvSigVersion <- as.factor(train.data$AvSigVersion)
#train.data$DefaultBrowsersIdentifier <- as.factor(train.data$DefaultBrowsersIdentifier)
train.data$AVProductStatesIdentifier <- as.factor(train.data$AVProductStatesIdentifier)
#train.data$HasTpm <- as.logical(train.data$HasTpm)
train.data$CountryIdentifier <- as.factor(train.data$CountryIdentifier)
train.data$CityIdentifier <- as.factor(train.data$CityIdentifier)
train.data$OrganizationIdentifier <- as.factor(train.data$OrganizationIdentifier)
train.data$GeoNameIdentifier <- as.factor(train.data$GeoNameIdentifier)
train.data$LocaleEnglishNameIdentifier <- as.factor(train.data$LocaleEnglishNameIdentifier)
train.data$Platform <- as.factor(train.data$Platform)
train.data$Processor <- as.factor(train.data$Processor)
train.data$OsVer <- as.factor(train.data$OsVer)
train.data$OsBuild <- as.factor(train.data$OsBuild)
train.data$OsSuite <- as.factor(train.data$OsSuite)
train.data$OsPlatformSubRelease <- as.factor(train.data$OsPlatformSubRelease)
train.data$OsBuildLab <- as.factor(train.data$OsBuildLab)
train.data$SkuEdition <- as.factor(train.data$SkuEdition)
#train.data$IsProtected <- as.factor(train.data$IsProtected)
train.data$PuaMode <- as.factor(train.data$PuaMode)
train.data$SMode <- as.factor(train.data$SMode)
train.data$SmartScreen <- as.factor(train.data$SmartScreen)
train.data$Firewall <- as.factor(train.data$Firewall)
train.data$UacLuaenable <- as.factor(train.data$UacLuaenable)
train.data$Census_MDC2FormFactor <- as.factor(train.data$Census_MDC2FormFactor)
train.data$Census_DeviceFamily <- as.factor(train.data$Census_DeviceFamily)
#train.data$Census_ProcessorCoreCount <- as.factor(train.data$Census_ProcessorCoreCount)
train.data$Census_ProcessorClass <- as.factor(train.data$Census_ProcessorClass)
#train.data$Census_PrimaryDiskTotalCapacity <- as.factor(train.data$Census_PrimaryDiskTotalCapacity)
train.data$Census_PrimaryDiskTypeName <- as.factor(train.data$Census_PrimaryDiskTypeName)
#train.data$Census_SystemVolumeTotalCapacity <- as.factor(train.data$Census_SystemVolumeTotalCapacity)
train.data$Census_HasOpticalDiskDrive <- as.factor(train.data$Census_HasOpticalDiskDrive)
#train.data$Census_TotalPhysicalRAM <- as.factor(train.data$Census_TotalPhysicalRAM)
train.data$Census_ChassisTypeName <- as.factor(train.data$Census_ChassisTypeName)
#train.data$Census_InternalPrimaryDiagonalDisplaySizeInInches <- as.factor(train.data$Census_InternalPrimaryDiagonalDisplaySizeInInches)
train.data$Census_InternalPrimaryDisplayResolutionHorizontal <- as.factor(train.data$Census_InternalPrimaryDisplayResolutionHorizontal)
train.data$Census_InternalPrimaryDisplayResolutionVertical <- as.factor(train.data$Census_InternalPrimaryDisplayResolutionVertical)
train.data$Census_PowerPlatformRoleName <- as.factor(train.data$Census_PowerPlatformRoleName)
train.data$Census_OSVersion <- as.factor(train.data$Census_OSVersion)
train.data$Census_OSArchitecture <- as.factor(train.data$Census_OSArchitecture)
train.data$Census_OSBranch <- as.factor(train.data$Census_OSBranch)
train.data$Census_OSBuildNumber <- as.factor(train.data$Census_OSBuildNumber)
train.data$Census_OSBuildRevision <- as.factor(train.data$Census_OSBuildRevision)
train.data$Census_OSEdition <- as.factor(train.data$Census_OSEdition)
train.data$Census_OSSkuName <- as.factor(train.data$Census_OSSkuName)
train.data$Census_OSInstallTypeName <- as.factor(train.data$Census_OSInstallTypeName)
train.data$Census_OSWUAutoUpdateOptionsName <- as.factor(train.data$Census_OSWUAutoUpdateOptionsName)
train.data$Census_IsPortableOperatingSystem <- as.factor(train.data$Census_IsPortableOperatingSystem)
train.data$Census_GenuineStateName <- as.factor(train.data$Census_GenuineStateName)
train.data$Census_ActivationChannel <- as.factor(train.data$Census_ActivationChannel)
#train.data$Census_IsFlightsDisabled <- as.factor(train.data$Census_IsFlightsDisabled)
train.data$Census_FlightRing <- as.factor(train.data$Census_FlightRing)
train.data.reduced <- select(train.data, ProductName, EngineVersion, AppVersion, AvSigVersion, AVProductStatesIdentifier, HasTpm, CountryIdentifier, CityIdentifier, OrganizationIdentifier, GeoNameIdentifier, LocaleEnglishNameIdentifier, Platform, Processor, OsVer, OsBuild, OsSuite, OsPlatformSubRelease, OsBuildLab, SkuEdition, IsProtected, PuaMode, SMode, SmartScreen, Firewall, UacLuaenable, Census_MDC2FormFactor, Census_DeviceFamily, Census_ProcessorCoreCount, Census_ProcessorClass, Census_PrimaryDiskTotalCapacity, Census_PrimaryDiskTypeName, Census_SystemVolumeTotalCapacity, Census_HasOpticalDiskDrive, Census_TotalPhysicalRAM, Census_ChassisTypeName, Census_InternalPrimaryDiagonalDisplaySizeInInches, Census_InternalPrimaryDisplayResolutionHorizontal, Census_InternalPrimaryDisplayResolutionVertical, Census_PowerPlatformRoleName, Census_OSVersion, Census_OSArchitecture, Census_OSBranch, Census_OSBuildNumber, Census_OSBuildRevision, Census_OSEdition, Census_OSSkuName, Census_OSInstallTypeName, Census_OSWUAutoUpdateOptionsName, Census_IsPortableOperatingSystem, Census_GenuineStateName, Census_ActivationChannel, Census_IsFlightsDisabled, Census_FlightRing, Census_IsSecureBootEnabled, Census_IsVirtualDevice, Census_IsTouchEnabled, Census_IsPenCapable, Census_IsAlwaysOnAlwaysConnectedCapable, Wdft_IsGamer, HasDetections)
head(train.data.reduced)
model1 <- randomForest(HasDetections ~ ., data = train.data, ntree = 500, mtry = 6, importance = TRUE)
dataPath <- "/Users/adeshghadge/Documents/Kaggle/MicrosoftMalware/data"
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE)
table(train.data$ProductName, train.data$HasDetections)
barplot(table(train.data$ProductName, train.data$HasDetections))
barplot(table(train.data$ProductName, train.data$HasDetections), beside = TRUE)
barplot(table(train.data$ProductName, train.data$HasDetections), beside = TRUE, col=c("darkblue", "red"))
barplot(table(train.data$ProductName, train.data$HasDetections), beside = TRUE, legend = rownames(counts), col=c("darkblue", "red"))
counts <- table(train.data$ProductName, train.data$HasDetections)
barplot(counts, beside = TRUE, legend = rownames(counts), col=c("darkblue", "red"))
counts <- table(train.data$HasDetections, train.data$ProductName)
barplot(counts, beside = TRUE, legend = rownames(counts), col=c("darkblue", "red"))
ProductName
table(train.data$HasDetections, train.data$ProductName)
table(train.data$ProductName, train.data$HasDetections)
table(train.data$EngineVersion, train.data$HasDetections)
table(train.data$AppVersion, train.data$HasDetections)
table(train.data$AvSigVersion, train.data$HasDetections)
sort(table(train.data$AvSigVersion, train.data$HasDetections))
sort(table(train.data$AvSigVersion, train.data$HasDetections)[,1])
table(train.data$AvSigVersion, train.data$HasDetections)[,1]
counts <- table(train.data$AvSigVersion, train.data$HasDetections)
names(counts)
counts
counts[1]
counts[,1]
sort(counts[,1])
sort(counts[,1], decreasing = T)
table(paste(train.data$ProductName, train.data$EngineVersion, train.data$AppVersion,  train.data$AvSigVersion, sep="#"), train.data$HasDetections)
table(train.data$GeoNameIdentifier, train.data$HasDetections)
table(train.data$CountryIdentifier, train.data$HasDetections)
table(train.data$CityIdentifier, train.data$HasDetections)
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE, nrows=500)
dataPath <- "/Users/adeshghadge/Documents/Kaggle/MicrosoftMalware/data"
train.data <- read.csv(paste(dataPath, "train.csv", sep = "/"), header = TRUE, nrows=500)
head(train.data)
table(train.data$HasDetections, train.data$IsBeta)
table(train.data$HasDetections, train.data$Census_ProcessorClass)
table(train.data$HasDetections, train.data$Census_InternalBatteryNumberOfCharges)
table(train.data$HasDetections, train.data$OsBuild)
table(train.data$HasDetections, train.data$ProductName)
table(train.data$ProductName, train.data$HasDetections)
table(train.data$Census_DeviceFamily, train.data$HasDetections)
head(train.data)
head(train.data)
