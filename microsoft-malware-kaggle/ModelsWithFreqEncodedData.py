import numpy as np
import pandas as pd
import string
from numpy.random import normal,random,seed

from sklearn.ensemble import RandomForestClassifier, VotingClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import log_loss
from sklearn import metrics
import scipy.stats as st
import pickle
import lightgbm as lgb

import sys

reload(sys)
sys.setdefaultencoding('utf8')

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16',
        'HasDetections':                                        'int8'
        }


print("Reading Train Data")
Data = pd.read_csv("../data/train.csv", dtype=dtypes)

print("Setting subset of columns")
#Data = Data.loc[:, ["ProductName", "EngineVersion", "AppVersion", "AvSigVersion", "AVProductStatesIdentifier", "HasTpm", "CountryIdentifier", "CityIdentifier", "OrganizationIdentifier", "GeoNameIdentifier", "LocaleEnglishNameIdentifier", "Platform", "Processor", "OsVer", "OsBuild", "OsSuite", "OsPlatformSubRelease", "OsBuildLab", "SkuEdition", "IsProtected", "PuaMode", "SMode", "SmartScreen", "Firewall", "UacLuaenable", "Census_MDC2FormFactor", "Census_DeviceFamily", "Census_ProcessorCoreCount", "Census_ProcessorClass", "Census_PrimaryDiskTotalCapacity", "Census_PrimaryDiskTypeName", "Census_SystemVolumeTotalCapacity", "Census_HasOpticalDiskDrive", "Census_TotalPhysicalRAM", "Census_ChassisTypeName", "Census_InternalPrimaryDiagonalDisplaySizeInInches", "Census_InternalPrimaryDisplayResolutionHorizontal", "Census_InternalPrimaryDisplayResolutionVertical", "Census_PowerPlatformRoleName", "Census_OSVersion", "Census_OSArchitecture", "Census_OSBranch", "Census_OSBuildNumber", "Census_OSBuildRevision", "Census_OSEdition", "Census_OSSkuName", "Census_OSInstallTypeName", "Census_OSWUAutoUpdateOptionsName", "Census_IsPortableOperatingSystem", "Census_GenuineStateName", "Census_ActivationChannel", "Census_IsFlightsDisabled", "Census_FlightRing", "Census_IsSecureBootEnabled", "Census_IsVirtualDevice", "Census_IsTouchEnabled", "Census_IsPenCapable", "Census_IsAlwaysOnAlwaysConnectedCapable", "Wdft_IsGamer", "HasDetections"]]

Data = Data.drop(['MachineIdentifier'],axis=1)

print("Splitting data into train and test")
X = Data.drop(['HasDetections'],axis=1)
y = LabelEncoder().fit_transform(Data.HasDetections)
xTrain, xTest, yTrain, yTest = train_test_split(X, y, test_size=0.3, random_state=0)

print("Label encoding train data")
le = LabelEncoder()
for column_name in xTrain.columns:
        if xTrain[column_name].dtype.name == 'category':
            xTrain.loc[:, column_name] = le.fit_transform(xTrain[column_name].astype(str))
        else:
            pass


xTrain = xTrain.fillna(-999)


print("Label encoding test data")
for column_name in xTest.columns:
        if xTest[column_name].dtype.name == 'category':
            xTest.loc[:, column_name] = le.fit_transform(xTest[column_name].astype(str))
        else:
            pass

xTest = xTest.fillna(-999)

print("Frequency encoding train data")
for column_name in xTrain.columns:
    if column_name not in ['Census_ProcessorCoreCount','Census_PrimaryDiskTotalCapacity',\
                                              'Census_SystemVolumeTotalCapacity','Census_TotalPhysicalRAM','Census_InternalPrimaryDiagonalDisplaySizeInInches',\
                                              'Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical']:
        probs = (xTrain[column_name].value_counts()/xTrain[column_name].count()).astype(np.float16)
        for ind in probs.index:
            xTrain.loc[xTrain[column_name] == ind, column_name] = probs[ind]
    else:
        pass

sc = StandardScaler()

dataColumns = xTrain.columns
scaled_df = sc.fit_transform(xTrain)
xTrain = pd.DataFrame(scaled_df, columns=dataColumns)


print("Saving frequency encoded train data")
pd.DataFrame.to_csv(xTrain, "../data/xTrain.csv")
pd.DataFrame(yTrain).to_csv("../data/yTrain.csv")

print("Frequency encoding test data")
for column_name in xTest.columns:
    if column_name not in ['Census_ProcessorCoreCount','Census_PrimaryDiskTotalCapacity',\
                                              'Census_SystemVolumeTotalCapacity','Census_TotalPhysicalRAM','Census_InternalPrimaryDiagonalDisplaySizeInInches',\
                                              'Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical']:
        probs = (xTest[column_name].value_counts()/xTest[column_name].count()).astype(np.float16)
        for ind in probs.index:
            xTest.loc[xTest[column_name] == ind, column_name] = probs[ind]
    else:
        pass

dataColumns = xTest.columns
scaled_df = sc.fit_transform(xTest)
xTest = pd.DataFrame(scaled_df, columns=dataColumns)

print("Saving frequency encoded test data")
pd.DataFrame.to_csv(xTest, "../data/xTest.csv")
pd.DataFrame(yTest).to_csv("../data/yTest.csv")


#Light GBM
print("Creating Light GBM train and test data")
train_data = lgb.Dataset(xTrain, label=yTrain)
test_data = lgb.Dataset(xTest, label=yTest)

param = {'num_leaves':43, 
         'num_round': 500,
         'objective':'binary',
         'learning_rate': 0.005,
         'max_depth': 37,
         'max_bin': 200,
         'seed': 1324,
         'verbose': 2}

param['metric'] = 'auc'

print("Training Light GBM")
bst = lgb.train(param, train_data, valid_sets=[test_data])

print("Saving Light GBM")
bst.save_model('lightGBMmodel.txt')

print("Predicting using test set")
result_gbm = bst.predict(xTest)

print("AUC Score : %f" % metrics.roc_auc_score(yTest, result_gbm))




#Random Forest
print("Run Random Forest model")

rfClf = RandomForestClassifier(random_state=9, n_jobs=-1, verbose=2)

rfClf.fit(xTrain, yTrain)

print("Predicting using test set")
y_rf_pre = rfClf.predict(xTest)
y_rf_pro = rfClf.predict_proba(xTest)[:, 1]

print("Accuracy : %.4g" % metrics.accuracy_score(yTest, y_rf_pre))
print("AUC Score : %f" % metrics.roc_auc_score(yTest, y_rf_pro))

print("Saving Random Forest Model")
# save the model to disk
filename = 'RF_model.sav'
pickle.dump(rfClf, open(filename, 'wb'))


print("Ensemble - Light GBM + Random Forest")
ens_probs = (results_gbm + y_rf_pro)/2
print("AUC Score : %f" % metrics.roc_auc_score(yTest, ens_probs))



#Test Set for Submission

dtypes = {
        'MachineIdentifier':                                    'category',
        'ProductName':                                          'category',
        'EngineVersion':                                        'category',
        'AppVersion':                                           'category',
        'AvSigVersion':                                         'category',
        'IsBeta':                                               'int8',
        'RtpStateBitfield':                                     'float16',
        'IsSxsPassiveMode':                                     'int8',
        'DefaultBrowsersIdentifier':                            'float16',
        'AVProductStatesIdentifier':                            'float32',
        'AVProductsInstalled':                                  'float16',
        'AVProductsEnabled':                                    'float16',
        'HasTpm':                                               'int8',
        'CountryIdentifier':                                    'int16',
        'CityIdentifier':                                       'float32',
        'OrganizationIdentifier':                               'float16',
        'GeoNameIdentifier':                                    'float16',
        'LocaleEnglishNameIdentifier':                          'int8',
        'Platform':                                             'category',
        'Processor':                                            'category',
        'OsVer':                                                'category',
        'OsBuild':                                              'int16',
        'OsSuite':                                              'int16',
        'OsPlatformSubRelease':                                 'category',
        'OsBuildLab':                                           'category',
        'SkuEdition':                                           'category',
        'IsProtected':                                          'float16',
        'AutoSampleOptIn':                                      'int8',
        'PuaMode':                                              'category',
        'SMode':                                                'float16',
        'IeVerIdentifier':                                      'float16',
        'SmartScreen':                                          'category',
        'Firewall':                                             'float16',
        'UacLuaenable':                                         'float32',
        'Census_MDC2FormFactor':                                'category',
        'Census_DeviceFamily':                                  'category',
        'Census_OEMNameIdentifier':                             'float16',
        'Census_OEMModelIdentifier':                            'float32',
        'Census_ProcessorCoreCount':                            'float16',
        'Census_ProcessorManufacturerIdentifier':               'float16',
        'Census_ProcessorModelIdentifier':                      'float16',
        'Census_ProcessorClass':                                'category',
        'Census_PrimaryDiskTotalCapacity':                      'float32',
        'Census_PrimaryDiskTypeName':                           'category',
        'Census_SystemVolumeTotalCapacity':                     'float32',
        'Census_HasOpticalDiskDrive':                           'int8',
        'Census_TotalPhysicalRAM':                              'float32',
        'Census_ChassisTypeName':                               'category',
        'Census_InternalPrimaryDiagonalDisplaySizeInInches':    'float16',
        'Census_InternalPrimaryDisplayResolutionHorizontal':    'float16',
        'Census_InternalPrimaryDisplayResolutionVertical':      'float16',
        'Census_PowerPlatformRoleName':                         'category',
        'Census_InternalBatteryType':                           'category',
        'Census_InternalBatteryNumberOfCharges':                'float32',
        'Census_OSVersion':                                     'category',
        'Census_OSArchitecture':                                'category',
        'Census_OSBranch':                                      'category',
        'Census_OSBuildNumber':                                 'int16',
        'Census_OSBuildRevision':                               'int32',
        'Census_OSEdition':                                     'category',
        'Census_OSSkuName':                                     'category',
        'Census_OSInstallTypeName':                             'category',
        'Census_OSInstallLanguageIdentifier':                   'float16',
        'Census_OSUILocaleIdentifier':                          'int16',
        'Census_OSWUAutoUpdateOptionsName':                     'category',
        'Census_IsPortableOperatingSystem':                     'int8',
        'Census_GenuineStateName':                              'category',
        'Census_ActivationChannel':                             'category',
        'Census_IsFlightingInternal':                           'float16',
        'Census_IsFlightsDisabled':                             'float16',
        'Census_FlightRing':                                    'category',
        'Census_ThresholdOptIn':                                'float16',
        'Census_FirmwareManufacturerIdentifier':                'float16',
        'Census_FirmwareVersionIdentifier':                     'float32',
        'Census_IsSecureBootEnabled':                           'int8',
        'Census_IsWIMBootEnabled':                              'float16',
        'Census_IsVirtualDevice':                               'float16',
        'Census_IsTouchEnabled':                                'int8',
        'Census_IsPenCapable':                                  'int8',
        'Census_IsAlwaysOnAlwaysConnectedCapable':              'float16',
        'Wdft_IsGamer':                                         'float16',
        'Wdft_RegionIdentifier':                                'float16'        
        }

print("Loading submission test data")
DataTest = pd.read_csv("../data/test.csv", dtype=dtypes)

MachineIdentifierCol = DataTest['MachineIdentifier'].copy()

#DataTest = DataTest.loc[:, ["ProductName", "EngineVersion", "AppVersion", "AvSigVersion", "AVProductStatesIdentifier", "HasTpm", "CountryIdentifier", "CityIdentifier", "OrganizationIdentifier", "GeoNameIdentifier", "LocaleEnglishNameIdentifier", "Platform", "Processor", "OsVer", "OsBuild", "OsSuite", "OsPlatformSubRelease", "OsBuildLab", "SkuEdition", "IsProtected", "PuaMode", "SMode", "SmartScreen", "Firewall", "UacLuaenable", "Census_MDC2FormFactor", "Census_DeviceFamily", "Census_ProcessorCoreCount", "Census_ProcessorClass", "Census_PrimaryDiskTotalCapacity", "Census_PrimaryDiskTypeName", "Census_SystemVolumeTotalCapacity", "Census_HasOpticalDiskDrive", "Census_TotalPhysicalRAM", "Census_ChassisTypeName", "Census_InternalPrimaryDiagonalDisplaySizeInInches", "Census_InternalPrimaryDisplayResolutionHorizontal", "Census_InternalPrimaryDisplayResolutionVertical", "Census_PowerPlatformRoleName", "Census_OSVersion", "Census_OSArchitecture", "Census_OSBranch", "Census_OSBuildNumber", "Census_OSBuildRevision", "Census_OSEdition", "Census_OSSkuName", "Census_OSInstallTypeName", "Census_OSWUAutoUpdateOptionsName", "Census_IsPortableOperatingSystem", "Census_GenuineStateName", "Census_ActivationChannel", "Census_IsFlightsDisabled", "Census_FlightRing", "Census_IsSecureBootEnabled", "Census_IsVirtualDevice", "Census_IsTouchEnabled", "Census_IsPenCapable", "Census_IsAlwaysOnAlwaysConnectedCapable", "Wdft_IsGamer"]]

DataTest = DataTest.drop(['MachineIdentifier'],axis=1)

print("Label encoding submission test data")
for column_name in DataTest.columns:
    if DataTest[column_name].dtype.name == "category":
        DataTest.loc[:, column_name] = le.fit_transform(DataTest[column_name].astype(str))
    else:
        pass

DataTest = DataTest.fillna(-999)

print("Frequency encoding submission test data")
for column_name in DataTest.columns:
    if column_name not in ['Census_ProcessorCoreCount','Census_PrimaryDiskTotalCapacity',\
                                              'Census_SystemVolumeTotalCapacity','Census_TotalPhysicalRAM','Census_InternalPrimaryDiagonalDisplaySizeInInches',\
                                              'Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical']:
        probs = (DataTest[column_name].value_counts()/DataTest[column_name].count()).astype(np.float16)
        for ind in probs.index:
            DataTest.loc[DataTest[column_name] == ind, column_name] = probs[ind]
    else:
        pass
        
dataColumns = DataTest.columns
scaled_df = sc.fit_transform(DataTest)
DataTest = pd.DataFrame(scaled_df, columns=dataColumns)

print("Saving frequency encoded submission test data")
pd.DataFrame.to_csv(DataTest, "../data/submissionTestData.csv")

print("Generating predictions using Light GBM model for submission data")
test_gbm = bst.predict(DataTest)

print("Generating predictions using Random Forest model for submission data")
test_rf = rfClf.predict_proba(DataTest)[: ,1] 

print("Light GBM - Creating submission dataframe")
results_final = pd.DataFrame(data=test_gbm,    # values
           index=MachineIdentifierCol,    # 1st column as index
           columns=['HasDetections'])  # 1st row as the column names

print("Light GBM - Saving submission dataframe as csv")
pd.DataFrame.to_csv(results_final, "../data/results_final_lightgbm.csv")           


print("Random Forest - Creating submission dataframe")
results_final = pd.DataFrame(data=test_rf,    # values                                                                                                                                                                                                                       
           index=MachineIdentifierCol,    # 1st column as index                                                                                                                                                                                                               
           columns=['HasDetections'])  # 1st row as the column names                                                                                                                                                                                                        
  
print("Random Forest - Saving submission dataframe as csv")
pd.DataFrame.to_csv(results_final, "../data/results_final_randomforest.csv")

print("Ensemble - Creating submission dataframe")
results_final = pd.DataFrame(data=((test_gbm + test_rf)/2),    #values
           index=MachineIdentifierCol,    # 1st column as index                                                                                                                                                                                                        
           columns=['HasDetections'])  # 1st row as the column names                                                                                                                                                                                                 
print("Random Forest - Saving submission dataframe as csv")
pd.DataFrame.to_csv(results_final, "../data/results_final_ensemble.csv")


