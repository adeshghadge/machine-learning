ft.data <- ts(airline.data.avg$WN$Delay,
freq=7, start=c(2015,1,1))
ft.data
365.25/7
ft.data <- ts(airline.data.avg$WN$Delay,
freq=365.25/7)
ft.data
bestfit <- list(aicc=Inf)
for(i in 1:25)
for(i in 1:25)
{
fit <- auto.arima(ft.data, xreg=fourier(ft.data, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
for(i in 1:25)
{
fit <- auto.arima(ft.data, xreg=fourier(ft.data, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
fc <- forecast(bestfit, xreg=fourier(ft.data, K=12, h=104))
bestfit
fc <- forecast(bestfit, xreg=fourier(ft.data, K=2, h=104))
fc <- forecast(bestfit, xreg=fourier(ft.data, K=3, h=104))
fc <- forecast(bestfit, xreg=fourier(ft.data, K=``, h=104))
fc <- forecast(bestfit, xreg=fourier(ft.data, K=1, h=104))
plot(fc)
bestfit
ft.data <- ts(airline.data.avg$WN$Delay,
freq=7)
ft.data
bestfit <- list(aicc=Inf)
for(i in 1:25)
{
fit <- auto.arima(ft.data, xreg=fourier(ft.data, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
bestfit
fc <- forecast(bestfit, xreg=fourier(ft.data, K=2, h=104))
plot(fc)
ft.ms.ts.data <- msts(airline.data.avg$WN$Delay, seasonal.periods = c(7, 30.4, 365.25))
ft.ms.ts.data
bestfit <- list(aicc=Inf)
for(i in 1:25)
{
fit <- auto.arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=i), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
for(i in 1:25)
{
for(j in 1:25) {
for(k in 1:25) {
fit <- auto.arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
for(i in 1:10)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- auto.arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
for(i in 1:3)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- auto.arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), seasonal=FALSE)
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
bestfit
i
j
k
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(3,14,1), h=104))
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(2,2,4), h=104))
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=104))
plot(fc)
ft.ms.ts.data
kpss.test(ft.ms.ts.data)
ndiffs(ft.ms.ts.data)
bestfit <- list(aicc=Inf)
for(i in 1:3)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- Arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), order = c(2,1,2))
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
bestfit
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=104))
plot(fc)
for(i in 1:3)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- Arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), order = c(4,1,4))
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=104))
plot(fc)
bestfit
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=365))
plot(fc)
forecast::accuracy(fc)
bestfit
bestfit <- list(aicc=Inf)
for(i in 1:3)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- Arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), order = c(4,1,4))
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=365))
plot(fc)
forecast::accuracy(fc)
bestfit
autoplot(fc)
ft.ms.ts.data
airline.data.avg$WN$DelayDate
ft.ms.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate < '2015-12-01'), ]$Delay, seasonal.periods = c(7, 30.4, 365.25))
ft.ms.ts.data
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, seasonal.periods = c(7, 30.4, 365.25))
ft.ms.test.ts.data
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, start=c(1.9,1), seasonal.periods = c(7, 30.4, 365.25))
ft.ms.test.ts.data
autoplot(fc) + autolayer(ft.ms.test.ts.data)
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, start=c(1.95,1), seasonal.periods = c(7, 30.4, 365.25))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, start=c(1.92,1), seasonal.periods = c(7, 30.4, 365.25))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, start=c(1.91,1), seasonal.periods = c(7, 30.4, 365.25))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
ft.ms.test.ts.data <- msts(airline.data.avg$WN[which(airline.data.avg$WN$DelayDate >= '2015-12-01'), ]$Delay, start=c(1.915,1), seasonal.periods = c(7, 30.4, 365.25))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
fc <- forecast(bestfit, xreg=fourier(ft.ms.ts.data, K=c(1,1,2), h=365))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
fc <- forecast(bestfit, xreg=fourier(ft.ms.test.ts.data, K=c(1,1,2), h=365))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
ft.ms.test.ts.data
for(i in 1:3)
{
for(j in 1:14) {
for(k in 1:25) {
fit <- Arima(ft.ms.ts.data, xreg=fourier(ft.ms.ts.data, K=c(i,j,k)), order = c(4,1,4))
if(fit$aicc < bestfit$aicc)
bestfit <- fit
else break;
}
}
}
fc <- forecast(bestfit, xreg=fourier(ft.ms.test.ts.data, K=c(1,1,2), h=365))
autoplot(fc) + autolayer(ft.ms.test.ts.data)
forecast::accuracy(fc, ft.ms.test.ts.data)
dyplot.prophet(m, forecast)
autoplot(fc) + autolayer(ft.ms.test.ts.data)
pacf(airline.ts.avg, lag = 400)
acf(airline.ts.avg, lag = 40)
pacf(airline.ts.avg, lag = 40)
flights.count.by.airline
head(flight.numerica.data)
head(flight.delay.data)
source('~/Box Sync/MScA/Courses/Time Series Analysis and Forecasting/Project/ts_project/project_yearly.R')
dataPath <- "/Users/adeshghadge/Downloads/flight-delays/"
flight.delay.data <- read.csv(file=paste0(dataPath, "flight_data_2015.csv"), header = TRUE)
head(flight.delay.data)
#Remove NAs
flight.delay.data <- flight.delay.data[which(is.na(flight.delay.data$DEP_DELAY) == FALSE & flight.delay.data$DEP_DELAY != 0 & flight.delay.data$DEP_DELAY <= 90),]
head(flight.delay.data)
dim(flight.delay.data)
flight.delay.data$SCHEDULED_DEPARTURE_FORMATTED <- sprintf("%04d", flight.delay.data$CRS_DEP_TIME)
flight.delay.data$DELAY_DATE <- ISOdatetime(flight.delay.data$YEAR, flight.delay.data$MONTH, flight.delay.data$DAY_OF_MONTH, substr(flight.delay.data$SCHEDULED_DEPARTURE_FORMATTED, start = 1, stop = 2), substr(flight.delay.data$SCHEDULED_DEPARTURE_FORMATTED, start = 3, stop = 4), c(0))
format(head(flight.delay.data$DELAY_DATE), "%Y-%m-%d %H")
flights.ord.data <- flight.delay.data[which(flight.delay.data$ORIGIN == 'ORD'),]
dim(flights.ord.data)
hourly.data.avg <- aggregate(flights.ord.data$DEP_DELAY, by=list(format(flights.ord.data$DELAY_DATE, "%Y-%m-%d %H:00")), FUN=mean)
head(hourly.data.avg, 30)
colnames(hourly.data.avg) <- c("date", "delay")
hourly.data.avg[which(hourly.data.avg$delay == 0), ]
dim(hourly.data.avg)
hist(hourly.data.avg$delay, breaks = 200)
dim(hourly.data.avg[which(hourly.data.avg$delay < 0),])
dim(hourly.data.avg[which(hourly.data.avg$delay > 0),])
dim(hourly.data.avg[which(hourly.data.avg$delay == 0),])
length(hourly.data.avg[which(hourly.data.avg$delay > 90),]$delay)
hourly.data.avg$date <- as.POSIXct(hourly.data.avg$date, origin="1970-01-01", format="%Y-%m-%d %H:%M")
library(xts)
#Create time series using xts package
df.xts <- xts(hourly.data.avg$delay, start = c(2015,1), order.by = hourly.data.avg$date)
head(df.xts)
dim(df.xts)
#Set dates for all months to the 1st of the month so that merging to create NA rows is easier
df.xts <- data.frame(delay = df.xts)
head(df.xts)
df.xts$date <- as.POSIXct(rownames(df.xts), origin="1970-01-01") #Add date column used in merge
class(df.xts$date)
dim(df.xts)
#Create data frame containing dates for all months starting from 2001 to 2013
all.dates.df <- data.frame(date = seq(as.POSIXct("2015-01-01 00:00"), to = as.POSIXct("2015-12-31 23:00"), by="hour"))
tail(all.dates.df, 30)
class(all.dates.df$date)
dim(all.dates.df)
#Merge data frames to create new data frame with missing months having NAs
df.agg <- merge(all.dates.df, df.xts, by.x="date", by.y="date", all.x=T, all.y=T)
head(df.agg)
dim(df.agg)
df.agg[which(df.agg$delay == 0),]$delay <- NA
dim(df.agg)
library(lubridate)
df.agg$date.hour <- hour(df.agg$date)
#Get data between 5 am and 10 pm
df.agg <- df.agg[which(df.agg$date.hour >= 5 & df.agg$date.hour <= 22), ]
df.agg[which(is.na(df.agg$delay) == T),]$delay
library(imputeTS)
plotNA.distribution(df.agg$delay)
statsNA(df.agg$delay)
plotNA.imputations(df.agg$delay, x.withImputations = na.interpolation(df.agg$delay, option = "spline"))
hourly.data.avg <- na.interpolation(df.agg$delay, option = "spline")
head(hourly.data.avg)
length(hourly.data.avg)
plot.ts(hourly.data.avg)
library(xts)
library(tseries)
library(TSA)
library(forecast)
library(fpp)
ts.hourly.data.avg <- ts(hourly.data.avg, frequency = 18)
head(ts.hourly.data.avg)
flight.delay.data.2014 <- read.csv(file=paste0(dataPath, "flight_data_2014.csv"), header = TRUE)
flight.delay.data.2014 <- flight.delay.data.2014[which(is.na(flight.delay.data.2014$DEP_DELAY) == FALSE & flight.delay.data.2014$DEP_DELAY != 0 & flight.delay.data.2014$DEP_DELAY <= 90),]
flight.delay.data.2014$SCHEDULED_DEPARTURE_FORMATTED <- sprintf("%04d", flight.delay.data.2014$CRS_DEP_TIME)
flight.delay.data.2014$DELAY_DATE <- ISOdatetime(flight.delay.data.2014$YEAR, flight.delay.data.2014$MONTH, flight.delay.data.2014$DAY_OF_MONTH, substr(flight.delay.data.2014$SCHEDULED_DEPARTURE_FORMATTED, start = 1, stop = 2), substr(flight.delay.data.2014$SCHEDULED_DEPARTURE_FORMATTED, start = 3, stop = 4), c(0))
flights.ord.data.2014 <- flight.delay.data.2014[which(flight.delay.data.2014$ORIGIN == 'ORD'),]
head(flights.ord.data.2014)
dim(flights.ord.data.2014)
hourly.data.avg.2014 <- aggregate(flights.ord.data.2014$DEP_DELAY, by=list(format(flights.ord.data.2014$DELAY_DATE, "%Y-%m-%d %H:00")), FUN=mean)
head(hourly.data.avg.2014, 30)
colnames(hourly.data.avg.2014) <- c("date", "delay")
hourly.data.avg.2014$date <- as.POSIXct(hourly.data.avg.2014$date, origin="1970-01-01", format="%Y-%m-%d %H:%M")
library(xts)
#Create time series using xts package
df.xts <- xts(hourly.data.avg.2014$delay, start = c(2014,1), order.by = hourly.data.avg.2014$date)
head(df.xts)
dim(df.xts)
#Set dates for all months to the 1st of the month so that merging to create NA rows is easier
df.xts <- data.frame(delay = df.xts)
head(df.xts)
df.xts$date <- as.POSIXct(rownames(df.xts), origin="1970-01-01") #Add date column used in merge
class(df.xts$date)
dim(df.xts)
#Create data frame containing dates for all months starting from 2001 to 2013
all.dates.df <- data.frame(date = seq(as.POSIXct("2014-01-01 00:00"), to = as.POSIXct("2014-12-31 23:00"), by="hour"))
tail(all.dates.df, 30)
class(all.dates.df$date)
dim(all.dates.df)
#Merge data frames to create new data frame with missing months having NAs
df.agg <- merge(all.dates.df, df.xts, by.x="date", by.y="date", all.x=T, all.y=T)
head(df.agg)
dim(df.agg)
df.agg[which(df.agg$delay == 0),]$delay <- NA
dim(df.agg)
library(lubridate)
df.agg$date.hour <- hour(df.agg$date)
#Get data between 5 am and 10 pm
df.agg <- df.agg[which(df.agg$date.hour >= 5 & df.agg$date.hour <= 22), ]
df.agg[which(is.na(df.agg$delay) == T),]$delay
library(imputeTS)
plotNA.distribution(df.agg$delay)
statsNA(df.agg$delay)
plotNA.imputations(df.agg$delay, x.withImputations = na.interpolation(df.agg$delay, option = "spline"))
hourly.data.avg.2014 <- na.interpolation(df.agg$delay, option = "spline")
plot.ts(hourly.data.avg.2014)
hourly.data.avg.multi <- rbind(hourly.data.avg.2014, hourly.data.avg)
head(hourly.data.avg.multi)
class(hourly.data.avg.2014)
head(hourly.data.avg.2014)
hourly.data.avg.multi <- c(hourly.data.avg.2014, hourly.data.avg)
head(hourly.data.avg.multi)
dim(hourly.data.avg.multi)
length(hourly.data.avg.multi)
ts.hourly.data.avg.multi <- ts(hourly.data.avg.multi, freq = 18)
hourly.data.avg.multi
ts.hourly.data.avg.multi
ts.hourly.test.data.avg.multi <- ts(hourly.data.avg.multi, start=c(731,1), frequency = 18)
head(ts.hourly.test.data.avg.multi)
ts.hourly.test.data.avg.multi <- ts(hourly.test.data.avg, start=c(731,1), frequency = 18)
p <- periodogram(ts.hourly.data.avg.multi, main="Avg Hourly Delay Periodogram")
max_freq <- p$freq[which.max(p$spec)]
max_freq
1/max_freq
hourly.mdl.multi <- auto.arima(ts.hourly.data.avg.multi, seasonal = T)
summary(hourly.mdl.multi)
pred.hourly.multi <- forecast(hourly.mdl.multi, h = 100)
pred.hourly.multi
plot(c(pred.hourly.multi$mean), type="l")
dataPath <- "/Users/adeshghadge/Downloads/flight-delays/"
flight.delay.test.data <- read.csv(file=paste0(dataPath, "flight_data_2016.csv"), header = TRUE)
#Remove NAs
flight.delay.test.data <- flight.delay.test.data[which(is.na(flight.delay.test.data$DEP_DELAY) == FALSE & flight.delay.test.data$DEP_DELAY != 0 & flight.delay.test.data$DEP_DELAY <= 90),]
flight.delay.test.data$SCHEDULED_DEPARTURE_FORMATTED <- sprintf("%04d", flight.delay.test.data$CRS_DEP_TIME)
flight.delay.test.data$DELAY_DATE <- ISOdatetime(flight.delay.test.data$YEAR, flight.delay.test.data$MONTH, flight.delay.test.data$DAY_OF_MONTH, substr(flight.delay.test.data$SCHEDULED_DEPARTURE_FORMATTED, start = 1, stop = 2), substr(flight.delay.test.data$SCHEDULED_DEPARTURE_FORMATTED, start = 3, stop = 4), c(0))
flights.ord.test.data <- flight.delay.test.data[which(flight.delay.test.data$ORIGIN == 'ORD'),]
hourly.test.data.avg <- aggregate(flights.ord.test.data$DEP_DELAY, by=list(format(flights.ord.test.data$DELAY_DATE, "%Y-%m-%d %H:00")), FUN=mean)
hourly.test.data.avg[which(hourly.test.data.avg$delay == 0), ]
colnames(hourly.test.data.avg) <- c("date", "delay")
hourly.test.data.avg$date <- as.POSIXct(hourly.test.data.avg$date, origin="1970-01-01", format="%Y-%m-%d %H:%M")
#Create time series using xts package
df.xts <- xts(hourly.test.data.avg$delay, start = c(2016,1), order.by = hourly.test.data.avg$date)
#Set dates for all months to the 1st of the month so that merging to create NA rows is easier
df.xts <- data.frame(delay = df.xts)
df.xts$date <- as.POSIXct(rownames(df.xts), origin="1970-01-01") #Add date column used in merge
#Create data frame containing dates for all months starting from 2001 to 2013
all.dates.df <- data.frame(date = seq(as.POSIXct("2016-01-01 00:00"), to = as.POSIXct("2016-12-31 23:00"), by="hour"))
#Merge data frames to create new data frame with missing months having NAs
df.agg <- merge(all.dates.df, df.xts, by.x="date", by.y="date", all.x=T, all.y=T)
df.agg[which(df.agg$delay == 0),]$delay <- NA
df.agg$date.hour <- hour(df.agg$date)
df.agg <- df.agg[which(df.agg$date.hour >= 5 & df.agg$date.hour <= 22), ]
hourly.test.data.avg <- na.interpolation(df.agg$delay, option = "spline")
head(hourly.test.data.avg)
suppressMessages(suppressWarnings(library(lmtest)))
suppressMessages(suppressWarnings(library(car)))
suppressMessages(suppressWarnings(library(pracma)))
hurstexp(ts.hourly.data.avg)
acf(ts.hourly.data.avg)
library(fracdiff)
mdl.af <- arfima(ts.hourly.data.avg)
summary(mdl.af)
acf(mdl.af$residuals, lag=400)
pacf(mdl.af$residuals, lag=400)
dwtest(lm(mdl.af$residuals~1), alternative="two.sided")
Box.test(mdl.af$residuals, lag = 10, type = "Ljung-Box", fitdf = 0)
pred.mdl.arf <- forecast(mdl.af, h = pred.period)
plot(pred.mdl.arf)
pred.period <- 558
pred.mdl.arf <- forecast(mdl.af, h = pred.period)
plot(pred.mdl.arf)
autoplot(pred.mdl.arf) + autolayer(ts.test.1st.month)
ts.hourly.test.data.avg <- ts(hourly.test.data.avg, start=c(366,1), frequency = 18)
ts.test.1st.month <- ts(ts.hourly.test.data.avg[1:558], frequency = 18, start=c(366,1))
autoplot(pred.mdl.arf) + autolayer(ts.test.1st.month)
plot(c(ts.hourly.test.data.avg), type="l")
lines(c(pred.mdl.arf$mean), col="red")
pred.mdl.arf <- forecast(mdl.af, h = pred.period)
plot(pred.mdl.arf)
autoplot(pred.mdl.arf) + autolayer(ts.test.1st.month)
plot(c(ts.hourly.test.data.avg), type="l")
lines(c(pred.mdl.arf$mean), col="red")
pred.mdl.arf <- forecast(mdl.af, h = pred.period)
plot(pred.mdl.arf)
plot(c(ts.hourly.test.data.avg), type="l")
plot(c(ts.test.1st.month), type="l")
lines(c(pred.mdl.arf$mean), col="red")
forecast.metrics.arfima <-forecast::accuracy(mdl.arf.1$fitted, ts.test.1st.month)
SMAPE(mdl.arf.1$fitted, ts.test.1st.month)/2
library(xts)
library(tseries)
library(TSA)
library(forecast)
library(fpp)
library(DescTools)
#-----------------------------------------------------------------------------------------------------------------------------------
#TBATS Model
y <- msts(hourly.data.avg, seasonal.periods = c(18, 3375, 6750)) # multiseasonal ts
y.t <- msts(hourly.test.data.avg[1:pred.period], c(18, 3375, 6750), start=c(1.97,1)) # multiseasonal ts
fit <- auto.arima(y, seasonal=F, xreg=fourier(y, K=c(8, 10, 12)))
fit
pred.ft <- forecast(fit, xreg=fourier(y.t, K=c(8, 10, 12)), h = pred.period)
plot.ts(pred.ft$mean, ylim=c(0,50))
lines(c(ts.test.1st.month), type="l")
plot.ts(c(y.t), type="l")
lines(c(pred.ft$mean), type="l", col="blue")
forecast::accuracy(pred.ft, y.t)
SMAPE(y.t, pred.ft$mean)/2
fit.tb <- tbats(y)
fit.tb
plot(fit.tb)
checkresiduals(fit.tb$errors)
tsdisplay(fit.tb$errors)
par(mfrow=c(2,1))
acf.plt <- acf(fit.tb$errors, lag=100)
plot(acf.plt, main="TBATS Residuals ACF")
pacf.plt <- pacf(fit.tb$errors, lag=100)
plot(pacf.plt, main="TBATS Residuals PACF")
par(mfrow=c(1,1))
components <- tbats.components(fit.tb)
plot(components)
pred.tb <- forecast(fit.tb, h = pred.period)
length(pred.tb$mean)
length(ts.test.1st.month)
plot.ts(pred.tb$mean)
plot(ts.hourly.test.data.avg, type="l")
lines(x=c(1:100),y = pred.tb$mean, col="red")
par(mfrow=c(1,1))
autoplot(pred.tb) + autolayer(y.t)
plot.ts(c(y.t), type="l", col="red", main="TBATS - Test Data vs Predicted (Jan, 2016)")
lines(c(pred.tb$mean), type="l", col="blue")
forecast.metrics.tbats <- forecast::accuracy(pred.tb, ts.test.1st.month)
forecast.metrics.tbats
smape.tbats <- SMAPE(c(ts.test.1st.month), pred.tb$mean)/2
smape.tbats
#-----------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------
#Fourier Terms
y.ft <- msts(hourly.data.avg, seasonal.periods = c(18)) # multiseasonal ts
y.ft.test <- msts(hourly.test.data.avg[1:pred.period], c(18), start=c(366,1)) # multiseasonal ts
mdl.hourly.ft <- Arima(y.ft, order=c(5,1,4), xreg=fourier(y.ft, K=c(8)))
mdl.hourly.ft
mdl.hourly.ft.p <- Arima(y.ft.test, model = mdl.hourly.ft, xreg=fourier(y.ft.test, K=c(8)))
SMAPE(mdl.hourly.ft.p$fitted, y.ft.test)/2
plot.ts(c(y.ft.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(mdl.hourly.ft.p$fitted), type="l", col="blue")
forecast::accuracy(mdl.hourly.ft.p$fitted, y.ft.test)
pred.mdl.hourly.ft <- forecast(mdl.hourly.ft, xreg = fourier(y.ft, K=c(8)),  h=pred.period)
pred.mdl.hourly.ft
autoplot(pred.mdl.hourly.ft) + autolayer(y.ft.test)
par(mfrow=c(2,1))
acf.plt <- acf(mdl.hourly.ft$residuals, lag=100)
plot(acf.plt, main="ARIMA with FT - Residuals ACF")
pacf.plt <- pacf(mdl.hourly.ft$residuals, lag=100)
plot(pacf.plt, main="ARIMA with FT - Residuals PACF")
par(mfrow=c(1,1))
plot.ts(c(y.ft.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(pred.mdl.hourly.ft$mean), type="l", col="blue")
forecast.metrics.ft <- forecast::accuracy(pred.mdl.hourly.ft, y.ft.test)
forecast.metrics.ft
smape.ft <- SMAPE(pred.mdl.hourly.ft$mean, y.ft.test)/2
smape.ft
lines(c(pred.hourly$mean), col="red")
plot(c(pred.hourly.multi$mean), type="l")
lines(c(pred.hourly.multi$mean), col="red")
pred.hourly.multi <- forecast(hourly.mdl.multi, h = pred.period)
pred.hourly.multi
plot(c(pred.hourly.multi$mean), type="l")
plot(c(ts.test.1st.month), type="l")
lines(c(pred.hourly.multi$mean), col="red")
y.ft.multi <- msts(hourly.data.avg.multi, seasonal.periods = c(18)) # multiseasonal ts
y.ft.multi
y.ft.multi.test <- msts(hourly.test.data.avg[1:pred.period], c(18), start=c(731,1)) # multiseasonal ts
mdl.hourly.ft.multi <- Arima(y.ft.multi, order=c(5,1,4), xreg=fourier(y.ft.multi, K=c(8)))
mdl.hourly.ft.multi
mdl.hourly.ft..multi.p <- Arima(y.ft.multi.test, model = mdl.hourly.ft.multi, xreg=fourier(y.ft.multi.test, K=c(8)))
SMAPE(mdl.hourly.ft.multi.p$fitted, y.ft.test)/2
mdl.hourly.ft.multi.p <- Arima(y.ft.multi.test, model = mdl.hourly.ft.multi, xreg=fourier(y.ft.multi.test, K=c(8)))
SMAPE(mdl.hourly.ft.multi.p$fitted, y.ft.test)/2
SMAPE(mdl.hourly.ft.multi.p$fitted, y.ft.multi.test)/2
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(mdl.hourly.ft.multi.p$fitted), type="l", col="blue")
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(y.ft.multi.test), type="l", col="blue")
forecast::accuracy(mdl.hourly.ft.p$fitted, y.ft.test)
pred.mdl.hourly.ft.multi <- forecast(mdl.hourly.ft.multi, xreg = fourier(y.ft.multi, K=c(8)),  h=pred.period)
pred.mdl.hourly.ft.multi
autoplot(pred.mdl.hourly.ft.multi) + autolayer(y.ft.multi.test)
pred.mdl.hourly.ft.multi <- forecast(mdl.hourly.ft.multi, xreg = fourier(y.ft.multi.test, K=c(8)),  h=pred.period)
autoplot(pred.mdl.hourly.ft.multi) + autolayer(y.ft.multi.test)
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(pred.mdl.hourly.ft.multi$mean), type="l", col="blue")
acf(mdl.hourly.ft.multi$residuals)
pacf(mdl.hourly.ft.multi$residuals)
y.ft.multi.test <- msts(hourly.test.data.avg[1:18], c(18), start=c(731,1)) # multiseasonal ts
pred.mdl.hourly.ft.multi <- forecast(mdl.hourly.ft.multi, xreg = fourier(y.ft.multi.test, K=c(8)),  h=pred.period)
pred.mdl.hourly.ft.multi
autoplot(pred.mdl.hourly.ft.multi) + autolayer(y.ft.multi.test)
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)")
lines(c(pred.mdl.hourly.ft.multi$mean), type="l", col="blue")
plot.ts(c(y.ft.multi.test), type="l", col="red", main="ARIMA with FT - Test Data vs Predicted (Jan, 2016)", ylim=c(0, 30))
lines(c(pred.mdl.hourly.ft.multi$mean), type="l", col="blue")
acf(mdl.hourly.ft.multi$residuals)
plot(c(hourly.data.avg.2014[1:18]))
plot(c(hourly.data.avg.2014[1:18]), type="l", col="red")
plot(c(hourly.data.avg[1:18]), type="l", col="blue")
lines(c(hourly.data.avg[1:18]), type="l", col="blue")
plot(c(hourly.data.avg.2014[1:18]), type="l", col="red")
lines(c(hourly.data.avg[1:18]), type="l", col="blue")
plot(c(hourly.data.avg.2014[1:18]), type="l", col="red", ylim=c(-20, 100))
lines(c(hourly.data.avg[1:18]), type="l", col="blue")
lines(c(hourly.test.data.avg[1:18]), type="l", col="blue")
lines(c(hourly.test.data.avg[1:18]), type="l", col="green")
?tsCV
